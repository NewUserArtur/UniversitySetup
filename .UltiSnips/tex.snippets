global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
    return x != '0' and x != '0'

endglobal


snippet template "template" b
\documentclass[a4paper]{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage[english]{babel}
\usepackage{amsmath, amssymb}


% figure support
\usepackage{import}
\usepackage{xifthen}
\pdfminorversion=7
\usepackage{pdfpages}
\usepackage{transparent}
\newcommand{\incfig}[1]{%
	\def\svgwidth{\columnwidth}
	\import{./figures/}{#1.pdf_tex}
}

\pdfsuppresswarningpagegroup=1

\begin{document}
	$0
\end{document}
endsnippet


snippet sign "Signature"
Best regards,

Artur Kravtsov
endsnippet


snippet today "Today"
`date +%F`
endsnippet


snippet box "Box"
`!p snip.rv = '┌' + '-'* (len(t[1]) + 2) + '┐'`
| $1 |
`!p snip.rv = '└' + '-'* (len(t[1]) + 2) + '┘'`
endsnippet


snippet beg "Begin-end" bA
\begin{$1}
	$0
\end{$1}
endsnippet


priority 100
snippet ... "dots" iA
\dots
endsnippet


snippet table "table" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet


snippet fig "figure" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet


snippet enum "enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet


snippet item "itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet


snippet desc "description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet


snippet pac "package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet


context "math()"
snippet => "implies" Ai
\implies
endsnippet


context "math()"
snippet =< "implied by" Ai
\impliedby
endsnippet


context "math()"
snippet iff "iff" Ai
\iff
endsnippet


priority 100
context "math()"
snippet -> "to" iA
\to
endsnippet


priority 200
context "math()"
snippet <-> "bijection" iA
\leftrightarrow
endsnippet


context "math()"
snippet !> "mapsto" iA
\mapsto
endsnippet


snippet mk "Math-inline" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet


snippet dm "Math-block" wA
\[
${1:${VISUAL}}
.\] $0
endsnippet


snippet ali "align" bA
\begin{align*}
	${1:${VISUAL}}
.\end{align*}
endsnippet


context "math()"
snippet '([A-Za-z])(\d)' "single subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet


context "math()"
snippet '([A-Za-z])_([a-zA-Z0-9]{2})' "double subscript" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


context "math()"
snippet __ "big subscript" iA
_{$1}$0
endsnippet


context "math()"
snippet td "superscript" iA
^{$1}$0
endsnippet


context "math()"
snippet rd "big superscript" iA
^{($1)}$0
endsnippet


context "math()"
snippet sr "^2" iA
^2
endsnippet


context "math()"
snippet cb "^3" iA
^3
endsnippet


context "math()"
snippet inv "inverse" iA
^{-1}
endsnippet


context "math()"
snippet compl "complement" iA
^{c}
endsnippet


context "math()"
snippet \\\ "set minus" iA
\setminus
endsnippet


context "math()"
snippet >> ">>" iA
\gg
endsnippet


context "math()"
snippet << "<<" iA
\ll
endsnippet


context "math()"
snippet ~~ "~" iA
\sim
endsnippet


context "math()"
snippet >- "succ" iA
\succ
endsnippet


context "math()"
snippet -< "prec" iA
\prec
endsnippet


context "math()"
snippet || "mid" iA
\mid
endsnippet


context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet


context "math()"
snippet cc "subset" Ai
\subset
endsnippet


context "math()"
snippet CC "supset" Ai
\supset
endsnippet


context "math()"
snippet inn "in" Ai
\in
endsnippet


context "math()"
snippet nni "ni" Ai
\ni
endsnippet


context "math()"
snippet notni "not ni" Ai
\not\ni
endsnippet


context "math()"
snippet not "not" Ai
\not
endsnippet


context "math()"
snippet NN "set" iA
\N
endsnippet


context "math()"
snippet QQ "set" iA
\Q
endsnippet


context "math()"
snippet ZZ "set" iA
\Z
endsnippet


context "math()"
snippet RR "set" iA
\R
endsnippet


context "math()"
snippet CC "set" iA
\C
endsnippet


context "math()"
snippet OO "empty set" iA
\O
endsnippet


context "math()"
snippet uu "union" iA
\cup
endsnippet


context "math()"
snippet UU "intersection" iA
\cap
endsnippet


context "math()"
snippet uU "long union" iA
\bigcup_{${1:i \in ${2:I}}} $0
endsnippet


context "math()"
snippet Uu "long intersection" iA
\bigcap_{${1:i \in ${2:I}}} $0
endsnippet


context "math()"
snippet <! "normal" iA
\triangleleft
endsnippet


context "math()"
snippet <> "diamond" iA
\diamond
endsnippet


context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet


context "math()"
snippet tt "text" iA
\text{$1} $0
endsnippet


context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet


snippet SI "SI" iA
\SI{$1}{$2}
endsnippet


snippet bigfun "big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $5
.\end{align*}
endsnippet


context "math()"
snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${3:n} \end{pmatrix}
endsnippet


context "math()"
snippet ooo "infinity" iA
\infty
endsnippet


context "math()"
snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet


context "math()"
snippet <= "leq" iA
\le
endsnippet


context "math()"
snippet >= "geq" iA
\ge
endsnippet


context "math()"
snippet EE "exists" iA
\exists
endsnippet


context "math()"
snippet AA "forall" iA
\forall
endsnippet


context "math()"
snippet '(x|y)((n|m|i|j){2})' "xn" iA
`!p snip.rv = match.group(1) + "_{" + match.group(2)[0] + "}"`
endsnippet


context "math()"
snippet '(x|y)(n|m|i|j)(p|m)' "x_{n+1}" iA
`!p snip.rv = match.group(1) + "_{" + match.group(2) + ("+" if match.group(3) == "p" else "-") + "1}"`
endsnippet


context "math()"
snippet R0p "R0+" iA
\\R_0^+
endsnippet


snippet plot "plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet


snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet


context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet


context "math()"
snippet lll "l" iA
\ell
endsnippet 


context "math()"
snippet nabl "nabla" iA
\nabla
endsnippet


context "math()"
snippet lapl "laplacian" iA
\Delta
endsnippet


context "math()"
snippet xx "cross" iA
\times
endsnippet


context "math()"
snippet ** "cdot" iA
\cdot
endsnippet


priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "function" rwA
\\`!p snip.rv = match.group(1)`
endsnippet


priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "function" rwA
\\`!p snip.rv = match.group(1)`
endsnippet


priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:+\infty}} ${3:${VISUAL}} $0
endsnippet


context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet


context "math()"
snippet / "fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet


context "math()"
snippet '((\d+)|(\d*)(\\)?([a-zA-Z]+)((\^|_)(\d|(\{[a-zA-Z0-9]+\}))))/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet


context "math()"
snippet '^.*\)/' "() fraction" wrA
`!p
stripped = math.string[:-1]
stack = 0
i = len(stripped)-1
while i >= 0:
	if stripped[i] == ')': stack += 1
	if stripped[i] == '(': stack -= 1
	if stack == 0: break
	i -= 1
snip.rv = stripped if i < 0 else stripped[:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet


context "math()"
snippet sympy "sympy block" w
sympy $1 sympy $0
endsnippet


context "math()"
priority 10000
snippet 'sympy(.*)sympy' "sympy evaluation" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, l, m, n, i, j = symbols('k l m n i j', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\','').replace('^','**').replace('{','(').replace('}',')') + ')')
`
endsnippet


snippet == "long equals" iA
&= $1 \\\\
endsnippet


context "math()"
snippet != "not equals" iA
\neq
endsnippet


context "math()"
snippet abs "abs" iA
\left| $1 \right|$0
endsnippet


context "math()"
snippet norm "norm" iA
\left\Vert $1 \right\Vert
endsnippet


context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil
endsnippet


context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor
endsnippet


context "math()"
snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet


context "math()"
snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet


context "math()"
snippet () "braces" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet


context "math()"
snippet lr "braces" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet


context "math()"
snippet lr( "braces" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet


context "math()"
snippet lr{ "{} braces" iA
\left{ ${1:${VISUAL}} \right} $0
endsnippet


context "math()"
snippet lr| "|| braces" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet


context "math()"
snippet lr[ "[] braces" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet


context "math()"
snippet lrb "{} braces" iA
\left{ ${1:${VISUAL}} \right} $0
endsnippet


context "math()"
snippet lra "braces" iA
\left< ${1:${VISUAL}} \right> $0
endsnippet


context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet


context "math()"
snippet sum "sum" w
\sum_{${1:n}=${2:1}}^{${3:\infty}} ${4:a_n z^n}
endsnippet


context "math()"
snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet


context "math()"
snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}}
endsnippet


context "math()"
snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}}
endsnippet


context "math()"
snippet liminf "liminf" w
\liminf_{${1:n} \to ${2:\infty}}
endsnippet

context "math()"
snippet prod "prod" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet


context "math()"
snippet part "partial derivative" w
\frac{\partial $1}{\partial ${1:x}} $0
endsnippet


context "math()"
snippet sq "sqrt" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet


context "math()"
priority 10
snippet "bar" "bar" riA
\overline{$1}{$0}
endsnippet


context "math()"
priority 100
snippet "([a-zA-Z])bar" "postfix bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet


context "math()"
priority 10
snippet "hat" "hat" riA
\hat{$1}{$0}
endsnippet


context "math()"
priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet


context "math()"
snippet "(\\?\w+)(,\.|\.,)" "vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet
